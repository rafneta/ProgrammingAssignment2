ylab="f(x)")
}
funci=function(x)
{
return((1/(2*pi))*sqrt(4-x^2))
}
montecarlo3(funci,10000,g)
montecarlo3=function(Fi,n,g)
{
Z=c()
while (length(Z)<n)
{
u1=runif(1)
u2=runif(1);
if (u1<=Fi(u2)){
Z=c(Z,4*u2-2)
}
}
plot(Z, xlab="numéro de dato", ylab = "valor del dato",
col="blue",pch = "." )
hist(Z, prob = T, col="lightsalmon",main="Histograma",
sub="Datos simulados",ylab="f(x)",
breaks = "FD")
curve(g(x), from=-1, to=5, add=T,col="violet",lwd=6,
ylab="f(x)")
}
funci=function(x)
{
return((1/(2*pi))*sqrt(4-x^2))
}
g=function(x)
{
return((2/(pi*2^2)*(sqrt(2^2-x^2))))
}
montecarlo3(funci,10000,g)
montecarlo3=function(Fi,n,g)
{
Z=c()
while (length(Z)<n)
{
u1=runif(1)
u2=runif(1);
if (u1<=Fi(u2)){
Z=c(Z,4*u2-2)
}
}
plot(Z, xlab="numéro de dato", ylab = "valor del dato",
col="blue",pch = "." )
hist(Z, prob = T, col="lightsalmon",main="Histograma",
sub="Datos simulados",ylab="f(x)",
breaks = "FD")
curve(g(x), from=-2, to=2, add=T,col="violet",lwd=6,
ylab="f(x)")
}
funci=function(x)
{
return((1/(2*pi))*sqrt(4-x^2))
}
g=function(x)
{
return((2/(pi*2^2)*(sqrt(2^2-x^2))))
}
montecarlo3(funci,10000,g)
montecarlo3=function(Fi,n,g)
{
Z=c()
while (length(Z)<n)
{
u1=runif(1)
u2=runif(1);
if (u1<=Fi(u2)){
Z=c(Z,4*u2-2)
}
}
plot(Z, xlab="numéro de dato", ylab = "valor del dato",
col="blue",pch = "." )
hist(Z, prob = T, col="lightsalmon",main="Histograma",
sub="Datos simulados",ylab="f(x)",
breaks = "FD")
curve(g(x), from=-2, to=2, add=T,col="violet",lwd=6,
ylab="f(x)")
}
funci=function(x)
{
return(sqrt(1-(2*x-1)^2))
}
g=function(x)
{
return((2/(pi*2^2)*(sqrt(2^2-x^2))))
}
montecarlo3(funci,10000,g)
target = function(x){
return(ifelse(x<0,0,exp(-x)))
}
x = rep(0,10000)
x[1] = 3     #initialize; I've set arbitrarily set this to 3
for(i in 2:10000){
current_x = x[i-1]
proposed_x = current_x + rnorm(1,mean=0,sd=1)
A = target(proposed_x)/target(current_x)
if(runif(1)<A){
x[i] = proposed_x       # accept move with probabily min(1,A)
} else {
x[i] = current_x        # otherwise "reject" move, and stay where we are
}
}
plot(x,main="values of x visited by the MH algorithm")
hist(x,xlim=c(0,10),probability = TRUE, main="Histogram of values of x visited by MH algorithm")
xx = seq(0,10,length=100)
lines(xx,target(xx),col="red")
setwd("~/Google Drive/MonteCarlo/Notas")
library()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags, class)
cls_list
class(cls_list)
as.caracter(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapple(flag_colors,mean)
sapply(flag_colors,mean)
flags_shapes<-flags[, 19:23]
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shpae_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
lenght(unique_vals, lenght)
lenght(unique_vals, length())
lenght(unique_vals, length
)
apply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals,length)
sapply(flags[,:],unique)
sapply(flags[,],unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
x <- list(a = 1:5, b = rnorm(10)) lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x<-1:4
lapply(x, runif)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
x<-1:4
lapply(x, runif)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
lapply(x, function(elt) elt[,1])
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
print("este es sapli")
sapply(x, mean)
x<-1:4
lapply(x, runif)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
lapply(x, function(elt) elt[,1])
str(apply)
str(apply)
x <- matrix(rnorm(200), 20, 10)
Sumacolumnas = apply(x, 2, sum)
Sumafilas = apply(x, 1, sum)
str(apply)
x <- matrix(rnorm(200), 20, 10)
Sumacolumnas = apply(x, 2, sum)
Sumafilas = apply(x, 1, sum)
print(Sumacolumnas,Sumafilas)
str(apply)
x <- matrix(rnorm(200), 20, 10)
Sumacolumnas = apply(x, 2, sum)
Sumafilas = apply(x, 1, sum)
print(str(Sumacolumnas),str(Sumafilas))
str(apply)
x <- matrix(rnorm(200), 20, 10)
Sumacolumnas = apply(x, 2, sum)
Sumafilas = apply(x, 1, sum)
Sumacolumnas
Sumafilas
str(apply)
x <- matrix(rnorm(200), 20, 10)
Sumacolumnas = apply(x, 2, sum)
Sumafilas = apply(x, 1, sum)
Sumacolumnas
Sumafilas
apply(x, 1, quantile, probs = c(0.25, 0.75))
?gl
mapply(rep, 1:4, 4:1)  # list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f<-gl(3,10)
f
tapply(x, f, mean)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
f
tapply(x, f, mean)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
f
tapply(x, f, mean)
tapply(x, f, range)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
f<-gl(3,10)
split(x, f)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
split(x, f)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
split(x, f)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
split(x, f)
lapply(split(x, f), mean)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f<-gl(3,10)
split(x, f)
lapply(split(x, f), mean)
library(datasets)
head(airquality)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
setwd("~/Google Drive (nivelacion.sabados@gmail.com)/DataScientsCourseraJHU/02RProgramming/Semana3/Programas")
?data
knitr::opts_chunk$set(echo = TRUE)
library(datasets)
data(iris)
?iris
library(datasets)
data(iris)
head(iris)
library(datasets)
data(iris)
head(iris)
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
indices=iris$Species==virginica
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
indices=iris$Species
indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica
indices=iris$Species
indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica
indices=iris$Species
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica
indices=iris$Species.Levels
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica
indices=iris$Species.Levels
indices
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica
indices=iris$Species.Levels==virginica
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
virginica.Levels
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
Levels(virginica)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species.Levels==virginica
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=levesl($Species.Levels)==levels(virginica)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=levesl(iris$Species)==levels(virginica)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=levels(iris$Species)==levels(virginica)
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=levels(iris$Species)==levels(virginica)
indices
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=levels(iris$Species)
tapply(iris$Sepal.Length,levels(iris$Species)==levels(virginica), mean)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species==virginica
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species=="virginica"
indices
#tapply(iris$Sepal.Length,levels(iris$Species)==levels(virginica), mean)
indices
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species=="virginica"
tapply(iris$Sepal.Length,indices, mean)
indices
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species=="virginica"
tapply(iris$Sepal.Length,indices, mean)
#indices
class(iris$Species)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species=="virginica"
tapply(iris$Sepal.Length,indices, mean)
library(datasets)
data(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
library(datasets)
data(iris)
head(iris)
virginica=factor("virginica")
levels(virginica)
indices=iris$Species=="virginica"
tapply(iris$Sepal.Length,indices, mean)
tapply(iris$Sepal.Length,iris$Species, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
a=sapply(split(mtcars$mpg, mtcars$cyl), mean)
class(a)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
a=sapply(split(mtcars$mpg, mtcars$cyl), mean)
a[1]-a[3]
debug(ls)
ls
debug(ls)
ls()
debug(ls)
ls
ls
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
a=sapply(split(mtcars$mpg, mtcars$cyl), mean)
a[1]-a[3]
tapply(mtcars$hp, mtcars$cyl, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
a=sapply(split(mtcars$mpg, mtcars$cyl), mean)
a[1]-a[3]
b=tapply(mtcars$hp, mtcars$cyl, mean)
b[3]-b[1]
setwd("~/Google Drive (nivelacion.sabados@gmail.com)/DataScientsCourseraJHU/02RProgramming/Semana3/Programas/ProgrammingAssignment2")
exit
exit()
quit()
exit()
